package cn.kevenpotter.designpatterns.proxy;

/**
 * 概念：为其他对象提供一种代理以控制对这个对象的访问。
 * 代理模式也叫做委托模式，它是一项基本设计技巧。许多其他的模式如<b>状态模式</b>、<b>策略模式</b>、<b>访问者模式</b>本质上是在更特殊的场合采用了
 * 委托模式，而且在日常的应用中，代理模式可以提供非常好的访问控制。
 * <p>
 * 优点：
 * 1.职责清晰。真实的角色就是实现实际的业务逻辑，不用关心其他非本职责的事务，通过后期的代理完成一件事务，附带的结果就是编程简洁清晰；
 * 2.高扩展性。具体主题角色是随时都会发生变化的，只要它实现了接口，甭管它如何变化，都逃不脱如来佛的手掌（接口），那我们的代理类完全就可以在不做任何修改的情况下使用；
 * 3.智能化。
 * 缺点：
 * 1.
 * <p>
 * 代理模式的本质：
 */
public class Overview {
}
